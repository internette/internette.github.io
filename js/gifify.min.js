var _ = self.Gifify = function (t) { this.selector = t.selector, this.tooltip_height = 125 }; _.prototype = { get init_elms() { return this.getAllElements(this.selector) }, getAllElements: function (t) { return document.querySelectorAll(t) }, cleanedQuery: function (t) { return t.match(/\s/gi) ? t.replace(/\s/gi, "+").toLowerCase() : t.toLowerCase() }, createTooltipImg: function (t, e) { var i = document.createElement("img"); return i.src = e, i.style.width = t + "px", i }, createConditional: function (t, e, i) { return t ? e() : i() }, styledToolTip: function (t, e, i) { return t.id = "gifify-tooltip", t.style.top = this.topPosition(e), t.style.left = this.leftPosition(e, i), t.className = this.combineClasses(e, i), t }, topPosition: function (t) { return this.createConditional(t.getBoundingClientRect().top < this.tooltip_height, function () { return t.getBoundingClientRect().top + t.getBoundingClientRect().height + 10 + "px" }, function () { return t.getBoundingClientRect().top - $this.tooltip_height - 10 + "px" }) }, leftPosition: function (t, e) { return this.createConditional(t.getBoundingClientRect().left < e, function () { return t.getBoundingClientRect().left + "px" }, function () { return $this.createConditional(t.getBoundingClientRect().left > window.innerWidth - e, function () { return window.innerWidth - e - 35 + "px" }, function () { return t.getBoundingClientRect().left + t.getBoundingClientRect().width / 2 - (e + 10) / 2 + "px" }) }) }, combineClasses: function (t, e) { var i = "", n = this; return i += this.createConditional(t.getBoundingClientRect().top < this.tooltip_height, function () { return "bottom" }, function () { return "top" }), i += " ", i += this.createConditional(t.getBoundingClientRect().left < e, function () { return "left" }, function () { return n.createConditional(t.getBoundingClientRect().left > window.innerWidth - e, function () { return "right" }, function () { return "" }) }), i = i.trim() }, createGifToolTip: function (t, e) { var i = this.styledToolTip(document.createElement("div"), e, t.width / 2), n = this.createTooltipImg(t.width / 2, t.src); return i.appendChild(n), i }, addTooltipToBody: function (t, e) { var i = this.createGifToolTip(t, e); document.body.appendChild(i) }, randInt: function (t, e) { return Math.floor(Math.random() * (e - t + 1)) + t }, getRandomImage: function (t) { var e = t[this.randInt(0, t.length)]; return e.hasOwnProperty("images") ? e.images.fixed_height : e.fixed_height }, imgProperties: function (t) { return { src: t.url, width: parseInt(t.width) } }, parsedResponseData: function (t) { return JSON.parse(t).data }, initializeTooltip: function (t, e) { var i = this.parsedResponseData(t), n = this.imgProperties(this.getRandomImage(i)); this.addTooltipToBody(n, e), this.fadeIn(document.getElementById("gifify-tooltip")) }, fadeIn: function (t) { var e = this; Number(t.style.opacity) < 1 && (t.style.opacity = Number(t.style.opacity) + .25, t.className.match(/top/gi) ? t.style.top = parseInt(t.style.top.slice(0, -2)) - 2 + "px" : t.style.top = parseInt(t.style.top.slice(0, -2)) + 2 + "px", setTimeout(function () { return e.fadeIn(t) }, 20)) }, apiCall: function (t) { var e = this, i = new XMLHttpRequest; i.open("GET", "https://api.giphy.com/v1/gifs/search?q=" + this.cleanedQuery(t.innerHTML) + "&api_key=dc6zaTOxFJmzC"), i.send(null), i.onreadystatechange = function () { 4 === i.readyState && (200 === i.status ? e.initializeTooltip(i.responseText, t) : console.error("There was a problem")) } }, fadeOut: function (t) { var e = this; Number(t.style.opacity) > 0 ? (t.style.opacity = Number(t.style.opacity) - .25, t.style.top = Number(t.style.top.slice(0, -2)) + 2 + "px", setTimeout(function () { return e.fadeOut(t) }, 30)) : t.parentNode.removeChild(t) }, gifify: function () { for (var t = 0; t < this.getAllElements(this.selector).length; t++)$this = this, this.init_elms[t].addEventListener("mouseenter", function (t) { setTimeout(function () { $this.apiCall(t.target) }, 100) }), $this.init_elms[t].addEventListener("mouseout", function () { for (var t = document.querySelectorAll("#gifify-tooltip"), e = 0; e < t.length; e++) { var i = t[e]; $this.fadeOut(i) } }) } }; var Wrapper = function (t) { return Wrapper.prototype = _.prototype, Wrapper.fn = _.prototype, new Gifify({ selector: t }) }; $ = Wrapper;